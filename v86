import asyncio
import logging
import sqlite3
import re
import time
import os
from datetime import datetime, timedelta
import pytz
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, WebDriverException
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ bothost.ru)
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID', '')

# –ú–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
MOSCOW_TZ = pytz.timezone('Europe/Moscow')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('models.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS models (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT UNIQUE,
            schedule TEXT,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS model_status (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            username TEXT,
            is_online BOOLEAN,
            has_sound BOOLEAN,
            is_black_screen BOOLEAN,
            viewers TEXT,
            followers TEXT,
            title TEXT,
            timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

init_db()

class StripchatMonitor:
    def __init__(self):
        self.driver = None
        self.setup_driver()
    
    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome –¥—Ä–∞–π–≤–µ—Ä–∞ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã"""
        chrome_options = Options()
        
        # –û–ø—Ü–∏–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–Ω–æ–π —Å—Ä–µ–¥—ã
        chrome_options.add_argument('--no-sandbox')
        chrome_options.add_argument('--disable-dev-shm-usage')
        chrome_options.add_argument('--disable-gpu')
        chrome_options.add_argument('--headless=new')
        
        # –û–ø—Ü–∏–∏ –¥–ª—è —Å–µ—Ç–∏
        chrome_options.add_argument('--ignore-certificate-errors')
        chrome_options.add_argument('--ignore-ssl-errors')
        chrome_options.add_argument('--disable-web-security')
        chrome_options.add_argument('--allow-running-insecure-content')
        
        # –û–ø—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        chrome_options.add_argument('--disable-extensions')
        chrome_options.add_argument('--disable-plugins')
        chrome_options.add_argument('--disable-images')
        chrome_options.add_argument('--blink-settings=imagesEnabled=false')
        
        # User-Agent
        chrome_options.add_argument('--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36')
        
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ logging
        chrome_options.add_argument('--log-level=3')
        chrome_options.add_experimental_option('excludeSwitches', ['enable-logging'])
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        chrome_options.add_argument('--disable-features=VizDisplayCompositor')
        chrome_options.add_argument('--disable-background-timer-throttling')
        chrome_options.add_argument('--disable-backgrounding-occluded-windows')
        chrome_options.add_argument('--disable-renderer-backgrounding')
        
        try:
            # –î–ª—è bothost.ru –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è —É–∫–∞–∑–∞—Ç—å –ø—É—Ç—å –∫ Chrome
            self.driver = webdriver.Chrome(options=chrome_options)
            self.driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            self.driver.set_page_load_timeout(30)
            self.driver.set_script_timeout(30)
            logger.info("‚úÖ –î—Ä–∞–π–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")
            self.driver = None

    def get_model_status_with_retry(self, username, max_retries=3):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
        for attempt in range(max_retries):
            try:
                status_data = self.get_model_status(username)
                if status_data['error'] and 'connection' in status_data['error'].lower():
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries} –¥–ª—è {username} - –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
                    if attempt < max_retries - 1:
                        time.sleep(5)
                        continue
                return status_data
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1} –¥–ª—è {username}: {e}")
                if attempt < max_retries - 1:
                    time.sleep(5)
                    continue
                return {
                    'timestamp': datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d %H:%M:%S MSK"),
                    'username': username,
                    'is_online': False,
                    'has_sound': None,
                    'is_black_screen': False,
                    'viewers': 'N/A',
                    'followers': 'N/A',
                    'title': 'N/A',
                    'error': f"–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã: {str(e)}"
                }
    
    def get_model_status(self, username):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏ –ø–æ username"""
        status_data = {
            'timestamp': datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d %H:%M:%S MSK"),
            'username': username,
            'url': f"https://stripchat.com/{username}",
            'is_online': False,
            'has_sound': None,
            'is_black_screen': False,
            'viewers': 'N/A',
            'followers': 'N/A',
            'title': 'N/A',
            'error': None
        }
        
        try:
            if not self.driver:
                self.setup_driver()
                if not self.driver:
                    status_data['error'] = "–î—Ä–∞–π–≤–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
                    return status_data
            
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–¥–µ–ª—å: {username}")
            self.driver.get(status_data['url'])
            
            try:
                WebDriverWait(self.driver, 20).until(
                    EC.presence_of_element_located((By.TAG_NAME, "body"))
                )
            except TimeoutException:
                status_data['error'] = "–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"
                return status_data
            
            status_data['timestamp'] = datetime.now(MOSCOW_TZ).strftime("%Y-%m-%d %H:%M:%S MSK")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞
            status_data['is_online'] = self.check_online_status()
            
            # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –æ–Ω–ª–∞–π–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–≤—É–∫ –∏ —á–µ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω
            if status_data['is_online']:
                status_data['has_sound'] = self.check_sound_status()
                status_data['is_black_screen'] = self.check_black_screen()
                self.get_statistics(status_data)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.save_model_status(status_data)
            
            logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å {username}: {'ONLINE' if status_data['is_online'] else 'OFFLINE'}")
            return status_data
            
        except TimeoutException as e:
            error_msg = f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {username}: {str(e)}"
            logger.error(error_msg)
            status_data['error'] = error_msg
            return status_data
        except WebDriverException as e:
            error_msg = f"–û—à–∏–±–∫–∞ WebDriver –¥–ª—è {username}: {str(e)}"
            logger.error(error_msg)
            status_data['error'] = error_msg
            if 'connection' in str(e).lower() or 'reset' in str(e).lower():
                try:
                    self.close()
                    time.sleep(2)
                    self.setup_driver()
                except Exception as restart_error:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –¥—Ä–∞–π–≤–µ—Ä–∞: {restart_error}")
            return status_data
        except Exception as e:
            error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {username}: {str(e)}"
            logger.error(error_msg)
            status_data['error'] = error_msg
            return status_data

    def check_online_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏"""
        try:
            online_indicators = [
                "//*[contains(@class, 'online')]",
                "//*[contains(@class, 'live')]",
                "//*[contains(@class, 'stream')]",
                "//*[contains(@class, 'broadcast')]",
                "//*[contains(text(), 'online')]",
                "//*[contains(text(), 'Live')]",
            ]
            
            for indicator in online_indicators:
                try:
                    elements = self.driver.find_elements(By.XPATH, indicator)
                    for element in elements:
                        if element.is_displayed():
                            return True
                except:
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            try:
                video_elements = self.driver.find_elements(By.TAG_NAME, "video")
                for video in video_elements:
                    if video.is_displayed() and video.get_attribute("src"):
                        return True
            except:
                pass
            
            return False
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–ª–∞–π–Ω —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return False

    def check_sound_status(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–≤—É–∫–∞"""
        try:
            sound_indicators = [
                "//*[contains(@class, 'sound')]",
                "//*[contains(@class, 'volume')]",
                "//*[contains(@class, 'mute')]",
                "//*[contains(@class, 'audio')]",
            ]
            
            for indicator in sound_indicators:
                try:
                    elements = self.driver.find_elements(By.XPATH, indicator)
                    for element in elements:
                        if element.is_displayed():
                            element_info = (element.get_attribute('class') + ' ' + 
                                          element.get_attribute('title') + ' ' + 
                                          (element.text or '')).lower()
                            
                            if any(word in element_info for word in ['mute', 'off', 'false', 'disabled', '–Ω–µ—Ç –∑–≤—É–∫–∞']):
                                return False
                            elif any(word in element_info for word in ['unmute', 'on', 'true', 'enabled', '—Å–æ –∑–≤—É–∫–æ–º']):
                                return True
                except:
                    continue
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            try:
                video_elements = self.driver.find_elements(By.TAG_NAME, "video")
                for video in video_elements:
                    if video.is_displayed():
                        muted = video.get_attribute("muted")
                        if muted == "true":
                            return False
                        elif muted == "false":
                            return True
            except:
                pass
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–≤—É–∫–∞: {e}")
        
        return None

    def check_black_screen(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á–µ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω"""
        try:
            video_elements = self.driver.find_elements(By.TAG_NAME, "video")
            for video in video_elements:
                if video.is_displayed() and video.get_attribute("src"):
                    return False
            
            offline_indicators = [
                "//*[contains(@class, 'offline')]",
                "//*[contains(@class, 'black')]",
                "//*[contains(text(), 'offline')]",
                "//*[contains(text(), '–æ—Ñ–ª–∞–π–Ω')]",
            ]
            
            for indicator in offline_indicators:
                try:
                    elements = self.driver.find_elements(By.XPATH, indicator)
                    for element in elements:
                        if element.is_displayed():
                            return True
                except:
                    continue
                    
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–µ—Ä–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞: {e}")
            return False

    def get_statistics(self, status_data):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–¥–µ–ª–∏"""
        try:
            # –ó—Ä–∏—Ç–µ–ª–∏
            viewers_selectors = [
                "//*[contains(@class, 'viewers')]",
                "//*[contains(@class, 'spectators')]",
                "//*[contains(text(), 'Viewers')]",
                "//*[contains(text(), '–ó—Ä–∏—Ç–µ–ª–∏')]",
            ]
            
            for selector in viewers_selectors:
                try:
                    elements = self.driver.find_elements(By.XPATH, selector)
                    for element in elements:
                        if element.is_displayed() and element.text.strip():
                            viewers_text = element.text.strip()
                            viewers_text = re.sub(r'[^\d]', '', viewers_text)
                            if viewers_text:
                                status_data['viewers'] = viewers_text
                            else:
                                status_data['viewers'] = element.text.strip()
                            break
                    if status_data['viewers'] != 'N/A':
                        break
                except:
                    continue
            
            # –ü–æ–¥–ø–∏—Å—á–∏–∫–∏
            follower_selectors = [
                "//*[contains(@class, 'followers')]",
                "//*[contains(text(), 'Followers')]",
                "//*[contains(text(), '–ü–æ–¥–ø–∏—Å—á–∏–∫–∏')]",
            ]
            
            for selector in follower_selectors:
                try:
                    elements = self.driver.find_elements(By.XPATH, selector)
                    for element in elements:
                        if element.is_displayed() and element.text.strip():
                            status_data['followers'] = element.text.strip()
                            break
                    if status_data['followers'] != 'N/A':
                        break
                except:
                    continue
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏
            title_selectors = [
                "//*[contains(@class, 'title')]",
                "//*[contains(@class, 'stream-title')]",
                "//h1",
                "//h2",
            ]
            
            for selector in title_selectors:
                try:
                    elements = self.driver.find_elements(By.XPATH, selector)
                    for element in elements:
                        if element.is_displayed() and element.text.strip():
                            status_data['title'] = element.text.strip()[:100]
                            break
                    if status_data['title'] != 'N/A':
                        break
                except:
                    continue
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def save_model_status(self, status_data):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥–µ–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = sqlite3.connect('models.db')
            cursor = conn.cursor()
            cursor.execute('''
                INSERT INTO model_status 
                (username, is_online, has_sound, is_black_screen, viewers, followers, title)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (
                status_data['username'],
                status_data['is_online'],
                status_data['has_sound'],
                status_data['is_black_screen'],
                status_data['viewers'],
                status_data['followers'],
                status_data['title']
            ))
            conn.commit()
            conn.close()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
    
    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        if self.driver:
            try:
                self.driver.quit()
                logger.info("‚úÖ –î—Ä–∞–π–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
monitor = StripchatMonitor()

def add_model(username, schedule=None):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('models.db')
        cursor = conn.cursor()
        cursor.execute('''
            INSERT OR REPLACE INTO models (username, schedule)
            VALUES (?, ?)
        ''', (username, schedule))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"Error adding model: {e}")
        return False

def remove_model(username):
    """–£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('models.db')
        cursor = conn.cursor()
        cursor.execute('DELETE FROM models WHERE username = ?', (username,))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"Error removing model: {e}")
        return False

def get_all_models():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('models.db')
        cursor = conn.cursor()
        cursor.execute('SELECT username, schedule FROM models')
        models = cursor.fetchall()
        conn.close()
        return [{'username': row[0], 'schedule': row[1]} for row in models]
    except Exception as e:
        logger.error(f"Error getting models: {e}")
        return []

def get_model_schedule(username):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    try:
        conn = sqlite3.connect('models.db')
        cursor = conn.cursor()
        cursor.execute('SELECT schedule FROM models WHERE username = ?', (username,))
        result = cursor.fetchone()
        conn.close()
        return result[0] if result else None
    except Exception as e:
        logger.error(f"Error getting schedule: {e}")
        return None

def update_model_schedule(username, schedule):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    try:
        conn = sqlite3.connect('models.db')
        cursor = conn.cursor()
        cursor.execute('UPDATE models SET schedule = ? WHERE username = ?', (schedule, username))
        conn.commit()
        conn.close()
        return True
    except Exception as e:
        logger.error(f"Error updating schedule: {e}")
        return False

def parse_schedule(schedule_text):
    """–ü–∞—Ä—Å–∏–Ω–≥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    lines = schedule_text.strip().split('\n')
    if not lines:
        return None
    
    username = lines[0].strip()
    schedule_data = {'username': username, 'days': {}}
    
    days_mapping = {
        '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'monday',
        '–≤—Ç–æ—Ä–Ω–∏–∫': 'tuesday', 
        '—Å—Ä–µ–¥–∞': 'wednesday',
        '—á–µ—Ç–≤–µ—Ä–≥': 'thursday',
        '–ø—è—Ç–Ω–∏—Ü–∞': 'friday',
        '—Å—É–±–±–æ—Ç–∞': 'saturday',
        '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 'sunday'
    }
    
    for line in lines[1:]:
        line = line.strip()
        if not line or '-' not in line:
            continue
            
        day_part, time_part = line.split('-', 1)
        day_part = day_part.strip().lower()
        time_part = time_part.strip()
        
        # –ù–∞—Ö–æ–¥–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        found_day = None
        for ru_day, en_day in days_mapping.items():
            if ru_day in day_part:
                found_day = en_day
                break
        
        if found_day:
            if '–≤—ã—Ö–æ–¥–Ω–æ–π' in time_part.lower():
                schedule_data['days'][found_day] = 'day_off'
            else:
                time_ranges = []
                for time_range in time_part.split(','):
                    time_range = time_range.strip()
                    if '-' in time_range:
                        start_time, end_time = time_range.split('-')
                        time_ranges.append({
                            'start': start_time.strip(),
                            'end': end_time.strip()
                        })
                schedule_data['days'][found_day] = time_ranges
    
    return schedule_data

def is_model_working_now(schedule_data):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ–ª–∂–Ω–∞ –ª–∏ –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å–µ–π—á–∞—Å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    if not schedule_data:
        return False
    
    now = datetime.now(MOSCOW_TZ)
    current_day = now.strftime('%A').lower()
    current_time = now.strftime('%H:%M')
    
    day_schedule = schedule_data['days'].get(current_day)
    
    if day_schedule == 'day_off':
        return False
    
    if isinstance(day_schedule, list):
        for time_range in day_schedule:
            if time_range['start'] <= current_time <= time_range['end']:
                return True
    
    return False

def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    keyboard = [
        [InlineKeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="add_model")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ–ª—å", callback_data="remove_model")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π", callback_data="list_models")],
        [InlineKeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="set_schedule")],
        [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ", callback_data="check_all")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å –º–æ–¥–µ–ª–∏", callback_data="status_model")],
        [InlineKeyboardButton("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="monitor_all")],
        [InlineKeyboardButton("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="stop_monitor")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_cancel_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã"""
    keyboard = [
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]
    ]
    return InlineKeyboardMarkup(keyboard)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ –ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Stripchat

‚è∞ –í—Å–µ –≤—Ä–µ–º—è —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ –ú–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (–ú–°–ö)

üìÖ –§–æ—Ä–º–∞—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:
–ù–ò–ö_–ú–û–î–ï–õ–ò
–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - 06:00-13:00
–í—Ç–æ—Ä–Ω–∏–∫ - 06:30-13:30
–°—Ä–µ–¥–∞ - –í—ã—Ö–æ–¥–Ω–æ–π
...

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
    await update.message.reply_text(welcome_text, reply_markup=get_main_keyboard())

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data == "add_model":
        await query.edit_message_text(
            "üë§ –í–≤–µ–¥–∏—Ç–µ username –º–æ–¥–µ–ª–∏:",
            reply_markup=get_cancel_keyboard()
        )
        context.user_data['waiting_for'] = 'add_model'
    
    elif data == "remove_model":
        models = get_all_models()
        if not models:
            await query.edit_message_text("üìù –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç", reply_markup=get_main_keyboard())
            return
        
        keyboard = []
        for model in models:
            keyboard.append([InlineKeyboardButton(f"üë§ {model['username']}", callback_data=f"remove_{model['username']}")])
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        
        await query.edit_message_text(
            "üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data == "list_models":
        models = get_all_models()
        if not models:
            await query.edit_message_text("üìù –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç", reply_markup=get_main_keyboard())
            return
        
        message = "üìù –ú–æ–¥–µ–ª–∏ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ:\n\n"
        for model in models:
            schedule_info = "‚è∞ –ï—Å—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ" if model['schedule'] else "‚è∞ –ë–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
            message += f"üë§ {model['username']} - {schedule_info}\n"
        
        await query.edit_message_text(message, reply_markup=get_main_keyboard())
    
    elif data == "set_schedule":
        models = get_all_models()
        if not models:
            await query.edit_message_text("üìù –ù–µ—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", reply_markup=get_main_keyboard())
            return
        
        keyboard = []
        for model in models:
            keyboard.append([InlineKeyboardButton(f"üë§ {model['username']}", callback_data=f"schedule_{model['username']}")])
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        
        await query.edit_message_text(
            "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data == "check_all":
        models = get_all_models()
        if not models:
            await query.edit_message_text("üìù –ù–µ—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", reply_markup=get_main_keyboard())
            return
        
        await query.edit_message_text(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è—é {len(models)} –º–æ–¥–µ–ª–µ–π...")
        
        results = []
        for model in models:
            try:
                status_data = monitor.get_model_status_with_retry(model['username'])
                
                if status_data['error']:
                    results.append(f"‚ùå {model['username']} - –û—à–∏–±–∫–∞: {status_data['error'][:50]}...")
                else:
                    if status_data['is_online']:
                        sound_status = "üîä" if status_data['has_sound'] else "üîá" if status_data['has_sound'] is False else "‚ùì"
                        screen_status = "üì∫" if not status_data['is_black_screen'] else "‚¨õ"
                        status_emoji = f"üü¢{sound_status}{screen_status}"
                    else:
                        status_emoji = "üî¥"
                    
                    results.append(f"{status_emoji} {model['username']} - {status_data['viewers']}")
                
                await asyncio.sleep(2)
                
            except Exception as e:
                results.append(f"‚ùå {model['username']} - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        
        message = "üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n\n" + "\n".join(results)
        await query.edit_message_text(message, reply_markup=get_main_keyboard())
    
    elif data == "status_model":
        models = get_all_models()
        if not models:
            await query.edit_message_text("üìù –ù–µ—Ç –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏", reply_markup=get_main_keyboard())
            return
        
        keyboard = []
        for model in models:
            keyboard.append([InlineKeyboardButton(f"üë§ {model['username']}", callback_data=f"status_{model['username']}")])
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
        
        await query.edit_message_text(
            "üìä –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    
    elif data == "monitor_all":
        await query.edit_message_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π...")
        await query.edit_message_text("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω", reply_markup=get_main_keyboard())
    
    elif data == "stop_monitor":
        await query.edit_message_text("üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
        await query.edit_message_text("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", reply_markup=get_main_keyboard())
    
    elif data.startswith("remove_"):
        username = data.replace("remove_", "")
        if remove_model(username):
            await query.edit_message_text(f"‚úÖ –ú–æ–¥–µ–ª—å {username} —É–¥–∞–ª–µ–Ω–∞", reply_markup=get_main_keyboard())
        else:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {username}", reply_markup=get_main_keyboard())
    
    elif data.startswith("schedule_"):
        username = data.replace("schedule_", "")
        context.user_data['waiting_for'] = 'set_schedule'
        context.user_data['schedule_username'] = username
        
        current_schedule = get_model_schedule(username)
        schedule_example = """–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:
–ù–ò–ö_–ú–û–î–ï–õ–ò
–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - 06:00-13:00
–í—Ç–æ—Ä–Ω–∏–∫ - 06:30-13:30
–°—Ä–µ–¥–∞ - –í—ã—Ö–æ–¥–Ω–æ–π
–ß–µ—Ç–≤–µ—Ä–≥ - –í—ã—Ö–æ–¥–Ω–æ–π
–ü—è—Ç–Ω–∏—Ü–∞ - 06:00-13:00
–°—É–±–±–æ—Ç–∞ - 06:30-13:30
–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - 06:30-13:30"""
        
        message = f"‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {username}:\n\n{schedule_example}"
        if current_schedule:
            message += f"\n\n–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{current_schedule}"
        
        await query.edit_message_text(message, reply_markup=get_cancel_keyboard())
    
    elif data.startswith("status_"):
        username = data.replace("status_", "")
        await query.edit_message_text(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å {username}...")
        
        status_data = monitor.get_model_status_with_retry(username)
        
        if status_data['error']:
            message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {username}:\n{status_data['error']}"
        else:
            status_emoji = "üü¢ ONLINE" if status_data['is_online'] else "üî¥ OFFLINE"
            sound_status = "üîä –°–æ –∑–≤—É–∫–æ–º" if status_data['has_sound'] else "üîá –ë–µ–∑ –∑–≤—É–∫–∞" if status_data['has_sound'] is False else "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            screen_status = "üì∫ –ï—Å—Ç—å –≤–∏–¥–µ–æ" if not status_data['is_black_screen'] else "‚¨õ –ß–µ—Ä–Ω—ã–π —ç–∫—Ä–∞–Ω"
            
            message = f"""üìä –°—Ç–∞—Ç—É—Å {username}:
{status_emoji}
{sound_status}
{screen_status}
üë• –ó—Ä–∏—Ç–µ–ª–∏: {status_data['viewers']}
‚ù§Ô∏è –ü–æ–¥–ø–∏—Å—á–∏–∫–∏: {status_data['followers']}
üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: {status_data['title']}
‚è∞ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {status_data['timestamp']}"""
        
        await query.edit_message_text(message, reply_markup=get_main_keyboard())
    
    elif data == "cancel":
        context.user_data.pop('waiting_for', None)
        context.user_data.pop('schedule_username', None)
        await query.edit_message_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text
    user_data = context.user_data
    
    if 'waiting_for' not in user_data:
        if any(day in text.lower() for day in ['–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–≤—Ç–æ—Ä–Ω–∏–∫', '—Å—Ä–µ–¥–∞', '—á–µ—Ç–≤–µ—Ä–≥', '–ø—è—Ç–Ω–∏—Ü–∞', '—Å—É–±–±–æ—Ç–∞', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ']):
            await update.message.reply_text("üìÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")
        return
    
    waiting_for = user_data['waiting_for']
    
    if waiting_for == 'add_model':
        username = text.strip().lower()
        if add_model(username):
            await update.message.reply_text(f"‚úÖ –ú–æ–¥–µ–ª—å {username} –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=get_main_keyboard())
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏", reply_markup=get_main_keyboard())
        user_data.pop('waiting_for', None)
    
    elif waiting_for == 'set_schedule':
        username = user_data.get('schedule_username')
        if username and update_model_schedule(username, text):
            await update.message.reply_text(f"‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {username} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=get_main_keyboard())
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è", reply_markup=get_main_keyboard())
        user_data.pop('waiting_for', None)
        user_data.pop('schedule_username', None)

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"Exception while handling an update: {context.error}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞
    if not TELEGRAM_TOKEN:
        logger.error("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        logger.error("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞ –Ω–∞ bothost.ru")
        return
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_error_handler(error_handler)
    
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ bothost.ru...")
    application.run_polling()

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    finally:
        monitor.close()
